# Tools

## Windows

https://yosyshq.net/yosys/download.html via the Tabby/OSS CAD Suite.

https://steveicarus.github.io/iverilog/
https://github.com/steveicarus/iverilog



# Data types

## Integer data types

Two-State integer data types

| Integer Data Type | Description |
| ----------------- | ----------- |
| shortint | 2-state data type, 16-bit signed integer |
| int | 2-state data type, 32-bit signed integer |
| longint | 2-state data type, 64-bit signed integer |
| byte | 2-state data type, 8-bit signed integer or ASCII characterv
| bit | 2-state data type, user-defined vector size, unsigned |

Four-State integer data types

| Integer Data Type | Description |
| ----------------- | ----------- |
| logic | 4-state data type, user-defined vector size, unsigned. A 1-bit 4-state variable, like the Verilog reg type; can be declared as any vector size (discussed in Chapter 3). |
| reg | 4-state data type, user-defined vector size, unsigned |
| integer  | 4-state data type, 32-bit signed integer |
| time | 4-state data type, 64-bit unsigned integer |

## enum
an enumerated net or variable with a labeled set of val-
ues; similar to the C enum type, but with additional syntax and
semantics for modeling hardware (discussed in Chapter 4).

## typedef
a user-defined data type, constructed from built-in
types or other user-defined types, similar to the C typedef (dis-
cussed in Chapter 4).

## struct
a collection of variables that can be referred to indi-
vidually or collectively, similar to the C struct type (discussed in
Chapter 5).

# Variables

Must be declared within a module, between the module...endmodule keywords.

# Nets

Must be declared within a module, between the module...endmodule keywords.

# Tasks

Must be declared within a module, between the module...endmodule keywords.

# Functions

Must be declared within a module, between the module...endmodule keywords.

# Named Blocks

(formed with begin...end or fork...join)

# Packages

To enable sharing a user-defined type definition across multiple
modules, SystemVerilog adds packages to the Verilog language.
The concept of packages is leveraged from the VHDL language.
SystemVerilog packages are defined between the keywords pack-
age and endpackage.

# Modules

Syntax:

```
module (
    <A>
);

    <B>

endmodule
```

The area &lt;A&gt; can contain ports which is where the module receives
or produces data. Ports are specified using input and output direction for that.

The area &lt;A&gt; can contain
* variable declarations (at module level)
e.g.
```
integer i;
instruction_t test_word;
logic [31:0] alu_out;
logic clock = 0;
```
* module instantiations
e.g.
```
chip chip (.clock(clock));
ALU dut (.IW(test_word), .result(alu_out), .clock(clock));
```
* process definitions (always, always_comb, initial, )
e.g.
```
always #5 clock = ~clock;
```

# Parameters in modules (Verilog and SystemVerilog)

Parameters are available in
Verilog: https://www.chipverify.com/verilog/verilog-parameters
SystemVerilog: https://verificationguide.com/systemverilog/systemverilog-parameters-and-define/
The syntax differs between the two languages.

The interface of a modules is defined by
- input / output ports

On top of the ports, there is the possibility to specify parameters with
default values.

When a module is instantiated, the parameter default values can be optionally
overridden to configure the module instance.

Verilog 1995

```
// Verilog 1995 style port declaration
module design_ip  ( addr,
                    wdata,
                    write,
                    sel,
                    rdata);

     parameter  BUS_WIDTH    = 32,
                DATA_WIDTH   = 64,
                FIFO_DEPTH   = 512;

     input addr;
     input wdata;
     input write;
     input sel;
     output rdata;

     wire [BUS_WIDTH-1:0] addr;
     wire [DATA_WIDTH-1:0] wdata;
     reg  [DATA_WIDTH-1:0] rdata;

     reg [7:0] fifo [FIFO_DEPTH];

     // Design code goes here ...
endmodule
```

System Verilog
```
module uart #(
    parameter CLOCK_FREQ = 12_000_000,      // Input clock frequency
    parameter BAUD_RATE  = 9600,            // UART Baud rate
    parameter UART_TX_DATA = 8140,          // memory-mapped address for TX (write to UART)
    parameter UART_TX_BUSY = 8144,          // memory-mapped address to check if TX is busy (has ongoing request)
    parameter UART_RX_BUFFER_FULL = 8148,   // memory-mapped address  to check if a read has completed
    parameter UART_RX_DATA = 8152,          // memory-mapped address for RX (read the data)
    parameter DBIT = 8,                     // UART Data Bits
    parameter SBIT = 1                      // UART Stop Bits
    )(
        input wire clk,
        ...
    );

    ...

endmodule
```

# Difference parameter and localparam

https://stackoverflow.com/questions/30288783/difference-between-parameter-and-localparam#:~:text=Verilog%20HDL%20local%20parameters%20are,module%20instance%20parameter%20value%20assignments.
https://ocw.mit.edu/courses/6-884-complex-digital-systems-spring-2005/resources/parameter_models/

Modules can contain parameters and local parameters in the #() section which
precedes the () section for input and output ports.

The parameter keyword allows the user of a module to override the default value
when instanting the module.

The localparam keyword prevents the user to override the localparam.
localparam can be used to prevent modifiction from outside the module.