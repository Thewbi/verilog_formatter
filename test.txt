module command(
    CLK,
    RESET_N,
    SADDR,
    NOP,
    READA,
    WRITEA,
    REFRESH,
    PRECHARGE,
    LOAD_MODE,
    REF_REQ,
    INIT_REQ,
    PM_STOP,
    PM_DONE,
    REF_ACK,
    CM_ACK,
    OE,
    SA,
    BA,
    CS_N,
    CKE,
    RAS_N,
    CAS_N,
    WE_N
);
    input CLK;
    input RESET_N;
    input [ - 1 : 0 ] SADDR;
    input NOP;
    input READA;
    input WRITEA;
    input REFRESH;
    input PRECHARGE;
    input LOAD_MODE;
    input REF_REQ;
    input INIT_REQ;
    input PM_STOP;
    input PM_DONE;
    output REF_ACK;
    output CM_ACK;
    output OE;
    output [ - 1 : 0 ] SA;
    output [ 1 : 0 ] BA;
    output [ 1 : 0 ] CS_N;
    output CKE;
    output RAS_N;
    output CAS_N;
    output WE_N;
    reg CM_ACK;
    reg REF_ACK;
    reg OE;
    reg [ - 1 : 0 ] SA;
    reg [ 1 : 0 ] BA;
    reg [ 1 : 0 ] CS_N;
    reg CKE;
    reg RAS_N;
    reg CAS_N;
    reg WE_N;
    reg do_reada;
    reg do_writea;
    reg do_refresh;
    reg do_precharge;
    reg do_load_mode;
    reg do_initial;
    reg command_done;
    reg [ 7 : 0 ] command_delay;
    reg [ 1 : 0 ] rw_shift;
    reg do_act;
    reg rw_flag;
    reg do_rw;
    reg [ 6 : 0 ] oe_shift;
    reg oe1;
    reg oe2;
    reg oe3;
    reg oe4;
    reg [ 3 : 0 ] rp_shift;
    reg rp_done;
    reg ex_read;
    reg ex_write;
    wire [ - 1 : 0 ] rowaddr;
    wire [ - 1 : 0 ] coladdr;
    wire [ - 1 : 0 ] bankaddr;
    
    always @ ( posedge CLK or negedge RESET_N )
    begin

        
        if (RESET_N == 0)
            begin
                do_reada <= 0;
                do_writea <= 0;
                do_refresh <= 0;
                do_precharge <= 0;
                do_load_mode <= 0;
                do_initial <= 0;
                command_done <= 0;
                command_delay <= 0;
                rw_flag <= 0;
                rp_shift <= 0;
                rp_done <= 0;
                ex_read <= 0;
                ex_write <= 0;
            end
        else
            begin
                
                if (INIT_REQ == 1)
                    begin
                        do_reada <= 0;
                        do_writea <= 0;
                        do_refresh <= 0;
                        do_precharge <= 0;
                        do_load_mode <= 0;
                        do_initial <= 1;
                        command_done <= 0;
                        command_delay <= 0;
                        rw_flag <= 0;
                        rp_shift <= 0;
                        rp_done <= 0;
                        ex_read <= 0;
                        ex_write <= 0;
                    end
                else
                    begin
                        do_initial <= 0;
                        
                        if (( REF_REQ == 1 | REFRESH == 1 ) & command_done == 0 & do_refresh == 0 & rp_done == 0 & do_reada == 0 & do_writea == 0)
                            do_refresh <= 1;
                        else
                            do_refresh <= 0;
                        
                        if (( READA == 1 ) & ( command_done == 0 ) & ( do_reada == 0 ) & ( rp_done == 0 ) & ( REF_REQ == 0 ))
                            begin
                                do_reada <= 1;
                                ex_read <= 1;
                            end
                        else
                            do_reada <= 0;
                        
                        if (( WRITEA == 1 ) & ( command_done == 0 ) & ( do_writea == 0 ) & ( rp_done == 0 ) & ( REF_REQ == 0 ))
                            begin
                                do_writea <= 1;
                                ex_write <= 1;
                            end
                        else
                            do_writea <= 0;
                        
                        if (( PRECHARGE == 1 ) & ( command_done == 0 ) & ( do_precharge == 0 ))
                            do_precharge <= 1;
                        else
                            do_precharge <= 0;
                        
                        if (( LOAD_MODE == 1 ) & ( command_done == 0 ) & ( do_load_mode == 0 ))
                            do_load_mode <= 1;
                        else
                            do_load_mode <= 0;
                        
                        if (( do_refresh == 1 ) | ( do_reada == 1 ) | ( do_writea == 1 ) | ( do_precharge == 1 ) | ( do_load_mode == 1 ))
                            begin
                                command_delay <= 8 'b 11111111;
                                command_done <= 1;
                                rw_flag <= do_reada;
                            end
                        else
                            begin
                                command_done <= command_delay [ 0 ];
                                command_delay <= ( command_delay >> 1 );
                            end
                        
                        if (command_delay [ 0 ] == 0 & command_done == 1)
                            begin
                                rp_shift <= 4 'b 1111;
                                rp_done <= 1;
                            end
                        else
                            begin
                                
                                if (SC_PM == 0)
                                    begin
                                        rp_shift <= ( rp_shift >> 1 );
                                        rp_done <= rp_shift [ 0 ];
                                    end
                                else
                                    begin
                                        
                                        if (( ex_read == 0 ) && ( ex_write == 0 ))
                                            begin
                                                rp_shift <= ( rp_shift >> 1 );
                                                rp_done <= rp_shift [ 0 ];
                                            end
                                        else
                                            begin
                                                
                                                if (PM_STOP == 1)
                                                    begin
                                                        rp_shift <= ( rp_shift >> 1 );
                                                        rp_done <= rp_shift [ 0 ];
                                                        ex_read <= 1 'b 0;
                                                        ex_write <= 1 'b 0;
                                                    end
                                            end
                                    end
                            end
                    end
            end
    end
    
    always @ ( posedge CLK or negedge RESET_N )
    begin

        
        if (RESET_N == 0)
            begin
                oe_shift <= 0;
                oe1 <= 0;
                oe2 <= 0;
                OE <= 0;
            end
        else
            begin
                
                if (SC_PM == 0)
                    begin
                        
                        if (do_writea == 1)
                            begin
                                
                                if (SC_BL == 1)
                                    oe_shift <= 0;
                                else
                                    
                                    if (SC_BL == 2)
                                        oe_shift <= 1;
                                    else
                                        
                                        if (SC_BL == 4)
                                            oe_shift <= 7;
                                        else
                                            
                                            if (SC_BL == 8)
                                                oe_shift <= 127;
                                oe1 <= 1;
                            end
                        else
                            begin
                                oe_shift <= ( oe_shift >> 1 );
                                oe1 <= oe_shift [ 0 ];
                                oe2 <= oe1;
                                oe3 <= oe2;
                                oe4 <= oe3;
                                
                                if (SC_RCD == 2)
                                    OE <= oe3;
                                else
                                    OE <= oe4;
                            end
                    end
                else
                    begin
                        
                        if (do_writea == 1)
                            oe4 <= 1;
                        else
                            
                            if (do_precharge == 1 | do_reada == 1 | do_refresh == 1 | do_initial == 1 | PM_STOP == 1)
                                oe4 <= 0;
                        OE <= oe4;
                    end
            end
    end
    
    always @ ( posedge CLK or negedge RESET_N )
    begin

        
        if (RESET_N == 0)
            begin
                rw_shift <= 0;
                do_rw <= 0;
            end
        else
            begin
                
                if (( do_reada == 1 ) | ( do_writea == 1 ))
                    begin
                        
                        if (SC_RCD == 1)
                            do_rw <= 1;
                        else
                            
                            if (SC_RCD == 2)
                                rw_shift <= 1;
                            else
                                
                                if (SC_RCD == 3)
                                    rw_shift <= 2;
                    end
                else
                    begin
                        rw_shift <= ( rw_shift >> 1 );
                        do_rw <= rw_shift [ 0 ];
                    end
            end
    end
    
    always @ ( posedge CLK or negedge RESET_N )
    begin

        
        if (RESET_N == 0)
            begin
                CM_ACK <= 0;
                REF_ACK <= 0;
            end
        else
            begin
                
                if (do_refresh == 1 & REF_REQ == 1)
                    REF_ACK <= 1;
                else
                    
                    if (( do_refresh == 1 ) | ( do_reada == 1 ) | ( do_writea == 1 ) | ( do_precharge == 1 ) | ( do_load_mode ))
                        CM_ACK <= 1;
                    else
                        begin
                            REF_ACK <= 0;
                            CM_ACK <= 0;
                        end
            end
    end
    
    always @ ( posedge CLK )
    begin

        
        if (RESET_N == 0)
            begin
                SA <= 0;
                BA <= 0;
                CS_N <= 1;
                RAS_N <= 1;
                CAS_N <= 1;
                WE_N <= 1;
                CKE <= 0;
            end
        else
            begin
                CKE <= 1;
                
                if (do_writea == 1 | do_reada == 1)
                    SA <= rowaddr;
                else
                    SA <= coladdr;
                
                if (( do_rw == 1 ) | ( do_precharge ))
                    SA [ 10 ] <= ! SC_PM;
                
                if (do_precharge == 1 | do_load_mode == 1)
                    BA <= 0;
                else
                    BA <= bankaddr [ 1 : 0 ];
                
                if (do_refresh == 1 | do_precharge == 1 | do_load_mode == 1 | do_initial == 1)
                    CS_N <= 0;
                else
                    begin
                        CS_N <= 0;
                    end
                
                if (do_load_mode == 1)
                    SA <= { 2 'b 00, SDR_CL, SDR_BT, SDR_BL };
                
                if (do_refresh == 1)
                    begin
                        RAS_N <= 0;
                        CAS_N <= 0;
                        WE_N <= 1;
                    end
                else
                    
                    if (( do_precharge == 1 ) & ( ( oe4 == 1 ) | ( rw_flag == 1 ) ))
                        begin
                            RAS_N <= 1;
                            CAS_N <= 1;
                            WE_N <= 0;
                        end
                    else
                        
                        if (do_precharge == 1)
                            begin
                                RAS_N <= 0;
                                CAS_N <= 1;
                                WE_N <= 0;
                            end
                        else
                            
                            if (do_load_mode == 1)
                                begin
                                    RAS_N <= 0;
                                    CAS_N <= 0;
                                    WE_N <= 0;
                                end
                            else
                                
                                if (do_reada == 1 | do_writea == 1)
                                    begin
                                        RAS_N <= 0;
                                        CAS_N <= 1;
                                        WE_N <= 1;
                                    end
                                else
                                    
                                    if (do_rw == 1)
                                        begin
                                            RAS_N <= 1;
                                            CAS_N <= 0;
                                            WE_N <= rw_flag;
                                        end
                                    else
                                        
                                        if (do_initial == 1)
                                            begin
                                                RAS_N <= 1;
                                                CAS_N <= 1;
                                                WE_N <= 1;
                                            end
                                        else
                                            begin
                                                RAS_N <= 1;
                                                CAS_N <= 1;
                                                WE_N <= 1;
                                            end
            end
    end
endmodule
 <EOF>